## Enable Virutal Environment
    -> go to 'project's' root folder
        * "cd 01_flask_to_do_cwh"
    -> install vicrutal Environment
        * "pip install virtualenv"
    -> create virtual Environment
        * "python3 -m venv virtualEnv"
    -> activate virtual Environment
        * "source virtualEnv/bin/activate"

## add .gitignore file
    -> add different files/folder
        * __pycache__
        * virtualEnv
        * .DS_Store

## Create requirements.txt file
    -> if install any module/library using 'pip install', insert it's name
        * django
    -> write 'install command in the terminal:
        * 'pip install -r requirements.txt'


## Install "Django" extension for VS Code
    -> write 'django' in the search bar
    -> install the extension of "Baptiste Darthenay"



------------------------------------ tasks/steps --------------------------------------


## Install Django 
    -> add 'django' into the requirements.txt file
    -> in the virtual environment write the 'install command' 
        * 'pip install -r requirements.txt'

## Create 'django project'
    -> type "django-admin startproject <app-name>
        * "django-admin startproject basic_app"

## Start Django Server:
    -> if you are in the parent folder go to the 'project' folder  
        - go to 'basic_app' from '01_django_basic_app_cwh'
            * cd basic_app
    -> run the 'runserver' command
        * python manage.py runserver
        - server will be opened in "127.0.0.1:8000" link 
    -> there can be an error -> "You have 18 unapplied migration(s). Your project may not work properly..."
        - write the command, and the warning will not be shown again
            * python manage.py migrate


## Rename Project:
    -> Source: https://stackoverflow.com/a/67640413
    -> replace all the <old-project-name> into <new-project-name>
        - replace the directory (folders) name 
        - replace from all the project's files 
    -> [TRICK] just find-replace the old-name into new-name, where-ever you find the old-name. That's it!


## Create app:
    -> go to the 'project' folder (if already not in the location)
        * cd basic_project
    -> write 'startapp' command
        * python manage.py startapp basic_app
    -> That's it!

## Create 'urls.py' in the basic_app:
    -> create 'urls.py' 
    -> copy the codes of 'basic_project/urls.py'
    -> paste the codes into the 'basic_app/urls.py'

## Defining "path-variables":
    -> first all the request comes to the 'basic_project/urls.py' file 
    -> then it can be directly send the user to a page
        OR, it will send the request to the 'basic_app/urls.py' file 
        - "/admin" path will be directly redirected to the "admin.site.urls"
        - "" can be redirect to the "basic_app/urls.py"
            * urlpatterns = [
            *    path('admin/', admin.site.urls),
            *    path("", include('basic_app.urls'))
            * ]
    
    -> 'basic_app/urls.py' generally redirect links to 'basic_app/views.py'
        * from basic_app import views

        * urlpatterns = [
        *    path("", views.index, name = "home")
        * ]

    -> 'basic_app/view.py' generally have different function with 'end-points'
        * from django.shortcuts import render, HttpResponse

        * def index(request):
        *    return HttpResponse("This is HOME PAGE")

## adding "about", "Services", or "Contact" pages
    -> in the 'basic_app/urls' add different end-points 
        * urlpatterns = [
            ..... , 
            path("about", views.about, name = "about"), 
            path("services", views.services, name = "services"), 
            path("contact", views.contact, name = "contact"), 
         ]
    -> in the 'basic_app/vies.py' add different functions
        * ......
          ......
          def about(request):
              return HttpResponse("This is ABOUT page")
          def services(request):
              return HttpResponse("This is SERVICES page")
          def contact(request):
              return HttpResponse("This is CONTACT page")
    
    -> That's it!
    
    *** QUESTION:
        ** Why we've not added any code into 'basic_project/urls.py', and the server given expected-output?


## adding 'static' and 'templates' files:
    -> create two directories exactly inside '01_django_basic_app_cwh/basic_project/basic_project' folder
        - create 'static' and 'templates' directory
        - inside 'basic_projects/settings.py' add this:
            * # manually added
              STATICFILES_DIRS = [
                  os.path.join(BASE_DIR, "static")
              ]
    -> inside the 'static' folder you can add different files like-> .txt, .mp4, .html, etc.
        - create a file named 'test.txt' and write something into this. Save it.
        - go to "127.0.0.1:8000/static/test.txt" link
        - you will see the writings inside the file in the browser 